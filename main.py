import streamlit as st
import pandas as pd
import numpy as np
from utils import fetch_recommendations as get_rcmnds, fetch_recommendation_scores as get_rcmnds_scores, fetch_recommendation_images as get_rcmnds_images, fetch_recommendation_features as get_rcmnds_features, fetch_recommendation_descriptions as get_rcmnds_desc, fetch_product_image as get_item_image

def main():
    st.set_page_config(layout="wide", initial_sidebar_state='expanded')

    articles_df = pd.read_csv('results/articles.csv')
    customers_rcmnds = pd.read_csv('results/customers_rcmnds.csv')
    customers = customers_rcmnds.customer.unique()

    models = ['Items based on visual feature embeddings',
              'Items based on textual feature embeddings',
              'Items based on descriptive attribute embeddings',
              'Items based on embeddings derived from TensorFlow Recommenders model',
              'Items based on a composite of all aforementioned embeddings']

    model_descs = ['The image embeddings are derived utilizing the VGG16 Convolutional Neural Network from Keras',
                          'The embeddings for text descriptions are computed using the "universal-sentence-encoder" from TensorFlow Hub',
                          'The feature embeddings are generated by applying one-hot encoding to the descriptive attributes provided by H&M',
                          'The TensorFlow Recommenders (TFRS) model executes a collaborative filtering-based ranking using a neural network architecture',
                          'A fusion of all the above-mentioned embeddings is employed to identify items with similar characteristics']

    st.sidebar.title("Customer Selection")
    customer_id = st.sidebar.text_input("Enter Customer ID", "")
    get_random = st.sidebar.button('Get Random Customer')

    if customer_id:
        try:
            customer_data = customers_rcmnds[customers_rcmnds.customer == customer_id]
            customer_history = np.array(eval(customer_data.history.iloc[0]))

            image_rcmnds, text_rcmnds, feature_rcmnds, tfrs_rcmnds, combined_rcmnds = get_rcmnds(customer_data)

            scores = get_rcmnds_scores(customer_data)
            features = get_rcmnds_features(articles_df, combined_rcmnds, tfrs_rcmnds, image_rcmnds, text_rcmnds, feature_rcmnds)
            images = get_rcmnds_images(combined_rcmnds, tfrs_rcmnds, image_rcmnds, text_rcmnds, feature_rcmnds)
            detail_descs = get_rcmnds_desc(articles_df, image_rcmnds, text_rcmnds, feature_rcmnds, tfrs_rcmnds, combined_rcmnds)

            rcmnds = (image_rcmnds, text_rcmnds, feature_rcmnds, tfrs_rcmnds, combined_rcmnds)

            splits = [customer_history[i:i+3] for i in range(0, len(customer_history), 3)]

            for split in splits:
                with st.sidebar.container():
                    cols = st.columns(3)
                    for item, col in zip(split, cols):
                        col.image(get_item_image(str(item), 100))

            with st.container():
                for i, model, image_set, score_set, model_desc, detail_desc_set, features_set, rcmnds_set in zip(range(5), models, images, scores, model_descs, detail_descs, features, rcmnds):
                    container = st.expander(model, expanded=True)
                    with container:
                        cols = st.columns(7)
                        cols[0].write('###### Similarity Score')
                        cols[0].caption(model_desc)
                        for img, col, score, detail_descs, rcmnd in zip(image_set[1:], cols[1:], score_set[1:], detail_desc_set[1:], rcmnds_set[1:]):
                            with col:
                                st.caption('{}'.format(score))
                                st.image(img, use_column_width=True)

        except (ValueError, IndexError):
            st.sidebar.error("Invalid Customer ID")
    elif get_random:
        st.sidebar.write('#### Customer history')

        rand_customer = np.random.choice(customers)
        customer_data = customers_rcmnds[customers_rcmnds.customer == rand_customer]
        customer_history = np.array(eval(customer_data.history.iloc[0]))

        image_rcmnds, text_rcmnds, feature_rcmnds, tfrs_rcmnds, combined_rcmnds = get_rcmnds(customer_data)

        scores = get_rcmnds_scores(customer_data)
        features = get_rcmnds_features(articles_df, combined_rcmnds, tfrs_rcmnds, image_rcmnds, text_rcmnds, feature_rcmnds)
        images = get_rcmnds_images(combined_rcmnds, tfrs_rcmnds, image_rcmnds, text_rcmnds, feature_rcmnds)
        detail_descs = get_rcmnds_desc(articles_df, image_rcmnds, text_rcmnds, feature_rcmnds, tfrs_rcmnds, combined_rcmnds)

        rcmnds = (image_rcmnds, text_rcmnds, feature_rcmnds, tfrs_rcmnds, combined_rcmnds)

        splits = [customer_history[i:i+3] for i in range(0, len(customer_history), 3)]

        for split in splits:
            with st.sidebar.container():
                cols = st.columns(3)
                for item, col in zip(split, cols):
                    col.image(get_item_image(str(item), 100))

        with st.container():
            for i, model, image_set, score_set, model_desc, detail_desc_set, features_set, rcmnds_set in zip(range(5), models, images, scores, model_descs, detail_descs, features, rcmnds):
                container = st.expander(model, expanded=True)
                with container:
                    cols = st.columns(7)
                    cols[0].write('###### Similarity Score')
                    cols[0].caption(model_desc)
                    for img, col, score, detail_desc, rcmnd in zip(image_set[1:], cols[1:], score_set[1:], detail_desc_set[1:], rcmnds_set[1:]):
                        with col:
                            st.caption('{}'.format(score))
                            st.image(img, use_column_width=True)

if __name__ == '__main__':
    main()